@rendermode InteractiveServer
@page "/items/edit/{Id:guid}"
@using Microsoft.AspNetCore.Components.Forms
@inherits ViewModelComponentBase<EditItemViewModel>
@inject NavigationManager NavigationManager

<PageTitle>Edit Item</PageTitle>

<h3>Edit Item</h3>

@if (ViewModel.ErrorMessage is not null)
{
    <div class="alert alert-danger">@ViewModel.ErrorMessage</div>
}

<EditForm Model="ViewModel" OnValidSubmit="UpdateItemAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <label>Name</label>
        <InputText class="form-control" @bind-Value="ViewModel.Name" />
    </div>
    <div class="mb-3">
        <label>Description</label>
        <InputText class="form-control" @bind-Value="ViewModel.Description" />
    </div>
    <div class="mb-3">
        <label>Category</label>
        <InputText class="form-control" @bind-Value="ViewModel.Category" />
    </div>
    <div class="mb-3">
        <label>Group</label>
        <InputSelect class="form-control" @bind-Value="ViewModel.GroupIdInput">
            <option value="">-- None --</option>
            @foreach (var group in ViewModel.Groups)
            {
                <option value="@group.Id">@group.Name</option>
            }
        </InputSelect>
    </div>
    <button class="btn btn-primary" type="submit" disabled="@ViewModel.IsBusy">Save</button>
    <button class="btn btn-secondary ms-2" type="button" @onclick="Cancel">Cancel</button>
</EditForm>

@if (ViewModel.IsSuccess)
{
    <div class="mt-3 alert alert-success">Item updated successfully! Redirecting...</div>
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await ViewModel.LoadGroupsAsync();
        await ViewModel.LoadAsync(Id);
    }

    private async Task UpdateItemAsync()
    {
        await ViewModel.UpdateAsync();
        if (ViewModel.IsSuccess)
        {
            await Task.Delay(1000);
            NavigationManager.NavigateTo("/items");
        }
    }
    private void Cancel() => NavigationManager.NavigateTo("/items");
} 