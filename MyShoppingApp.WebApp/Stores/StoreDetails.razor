@using static Microsoft.AspNetCore.Components.Web.RenderMode
@rendermode InteractiveServer
@using MyShoppingApp.WebApp.Stores
@using MyShoppingApp.WebApp.Components.Core
@using MyShoppingApp.WebApp.Components
@page "/stores/{storeId:guid}"
@inherits ViewModelComponentBase<StoreDetailsViewModel>

@code {
    [Parameter]
    public Guid storeId { get; set; }

    protected override void OnParametersSet()
    {
        ViewModel.SetStoreId(storeId);
    }
}

<PageTitle>Store Details</PageTitle>

<h3>Store Details</h3>

@if (ViewModel.IsBusy)
{
    <p>Loading store details...</p>
}
else if (!string.IsNullOrEmpty(ViewModel.ErrorMessage))
{
    <div class="alert alert-danger">@ViewModel.ErrorMessage</div>
}
else if (ViewModel.Store is not null)
{
    <div class="card">
        <div class="card-body">
            <h4 class="card-title">@ViewModel.Store.Name</h4>
            <p class="card-text">@ViewModel.Store.Description</p>
            <dl class="row">
                <dt class="col-sm-3">Group</dt>
                <dd class="col-sm-9">@ViewModel.Store.GroupId</dd>
                <dt class="col-sm-3">Address</dt>
                <dd class="col-sm-9">@ViewModel.Store.Address?.Street, @ViewModel.Store.Address?.City, @ViewModel.Store.Address?.State, @ViewModel.Store.Address?.ZipCode</dd>
                <dt class="col-sm-3">Aisles</dt>
                <dd class="col-sm-9">@string.Join(", ", ViewModel.Store.Aisles ?? new List<string>())</dd>
                <dt class="col-sm-3">Created At</dt>
                <dd class="col-sm-9">@ViewModel.Store.CreatedAt</dd>
                <dt class="col-sm-3">Updated At</dt>
                <dd class="col-sm-9">@ViewModel.Store.UpdatedAt</dd>
            </dl>
        </div>
    </div>
}
else
{
    <p>Store not found.</p>
} 